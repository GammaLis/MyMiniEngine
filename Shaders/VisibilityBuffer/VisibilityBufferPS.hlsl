#define SHADER_PS

#include "VisibilityBufferCommon.hlsli"

#if PACK_UNORM
#define OUTFORMAT float4
#else
#define OUTFORMAT uint
#endif

// NOTE: SV_PrimitiveID can be slow, use leading vertex instead.
float4 main(Varyings i, uint PrimitiveID : SV_PrimitiveID, noperspective float3 BaryWeights : SV_Barycentrics, bool bFront : SV_IsFrontFace) : SV_TARGET
{
	const uint DrawID = i.drawId;

	float3 normal = normalize(i.normal);

	float4 col = 0;
	
	// debug normal
	col.rgb = normal * 0.5 + 0.5;

	// debug uv
	col = float4(i.uv0, 0, 0);

	// debug primitiveID
	col.rgb = IntToColor(PrimitiveID);

	// debug barycentrics
	col.rgb = BaryWeights;

	// Pack 'DrawID | PrimitiveID'
	uint packedVisibility = CalcVBID(true, DrawID, PrimitiveID);
#if PACK_UNORM
	col = UnpackUnorm4x8( packedVisibility );
#else
	col = packedVisibility;
#endif

	return col;
}

/**
 * >> System Values
 * https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-semantics
 * SV_VertexID: per-vertex identifier. Available as the input to the vertex shader only.
 * SV_PrimitiveID: per-primitive identifier generated by the runtime.
 */

/**
 * >> SV_Barycentrics
 * https://github.com/microsoft/DirectXShaderCompiler/wiki/SV_Barycentrics
 *
 * ** Barycentric Coordinate Interpolation Types
 * For the most part, barycentric coordinates behave just like any other regular attribute, in the sense of allowing either affine 
 * (screen-space) or perspective-correct interpolation, and optional centroid adjustment,
 *
 * perspective-correct barycentrics (default) : linear float3 BaryLinear : SV_Barycentrics;
 * centroid-adjusted affine (screen-space) barycentrics: centroid noperspective float3 BaryAffine : SV_Barycentrics;
 * force shader to run at supersamping rate (one invocation per MSAA sample): sample noperspective float3 BaryAffineSample : SV_Barycentrics;
 *
 * Attributes declared as `nointerpolation` do not participate in the clipping and interpolation setup stages, but rather their per-vertex 
 * values are provided as is to the pixel shader.
 * <attributeType> GetAttributeAtVertex( nointerpolation <attributeType> attribute, uint VertexID );
 */
